gcc 
arm-none-eabi-gcc -c qfplib-m0-full.s -o qfplib-m0-full.o
arm-none-eabi-ar rcs libqfplib.a qfplib-m0-full.o

keil
include libqfplib.a as libaray file


.eabi_attribute Tag_ABI_align_preserved, 1 is an ARM EABI (Embedded Application Binary Interface) attribute used to describe how the compiler handles alignment properties in the generated object code. These EABI attributes are typically used to describe compiler options, function calling conventions, alignment rules, etc., which help linkers and loaders correctly handle the object code.

Explanation
In ARM assembly code, you may see the .eabi_attribute directive, which is used to specify ABI characteristics related to the object file or function. This attribute is usually found at the beginning of the assembly file or in specific code sections.

.eabi_attribute: This is a pseudo-instruction used to set ABI attributes for the object file.
Tag_ABI_align_preserved: This indicates whether alignment information is preserved between function calls.
Value 1: This represents the value of the attribute. For Tag_ABI_align_preserved, a value of 1 typically indicates that alignment requirements are preserved during function calls, meaning that the caller and callee maintain consistent stack alignment.
Tag_ABI_align_preserved Detailed Explanation
The Tag_ABI_align_preserved attribute specifies stack alignment behavior during function calls. For the ARM architecture, stack alignment is critical for performance and effective data access. In EABI, the stack is generally required to be aligned to 8 bytes to ensure the correctness of SIMD instructions or other operations that require alignment.

Tag_ABI_align_preserved, 1: This attribute value of 1 means that stack alignment must be preserved during function calls. In other words, when one function calls another, the stack pointer's alignment remains consistent. This kind of alignment is necessary for many embedded systems, especially those following the ARM EABI standard, like Cortex-M systems.
Importance of Stack Alignment: 8-byte alignment enables more efficient floating-point operations (such as those involving the double type) and SIMD operations, which is beneficial for performance optimization. Therefore, this attribute is commonly used to ensure that the compiler-generated code maintains proper alignment across function calls.
Practical Application
In practice, this .eabi_attribute is usually added automatically by the compiler, so you don't need to modify it manually. It indicates that the current assembly or object file complies with specific ABI rules. Here are some application scenarios:

Assembly Code Compatibility:

When using assembly code alongside C/C++ code in mixed compilation, these ABI attributes help ensure consistency between different compilation units.
The compiler and linker use this information to ensure that the code can be properly linked and executed without issues in calling conventions.
Debugging and Performance Optimization:

Understanding these ABI attributes can help debug stack alignment issues, particularly when dealing with floating-point numbers or SIMD data.
Improper stack alignment may lead to hardware exceptions or significant performance degradation.
Attribute Values
Tag_ABI_align_preserved, 0: Indicates that stack alignment is not enforced during function calls.
Tag_ABI_align_preserved, 1: Indicates that stack alignment must be preserved during function calls, which is also the default choice for most ARM toolchains.
Typically, you will see similar .eabi_attribute directives in assembly files generated by the compiler, indicating default behaviors that are intended to be compatible with specific processors or ABI requirements. These attributes generally do not need to be manually written, but understanding them can help diagnose some low-level issues.

Summary
.eabi_attribute Tag_ABI_align_preserved, 1 is an ARM EABI attribute that describes stack alignment, indicating that the stack pointer alignment is maintained between function calls. This attribute ensures that the stack is correctly aligned across different functions, enhancing execution efficiency and preventing alignment-related errors. In most cases, this attribute is automatically generated by the compiler and does not require developer intervention.

